//
//  conceptsEnglish.swift
//  evalfinal1
//
//  Created by Cristian Tinoco Yurivilca on 7/09/18.
//  Copyright © 2018 inkataxi. All rights reserved.
//

import Foundation



var conceptsEnglish : [ConceptProgramming] = [
    
    ConceptProgramming(nameTitle: "Abstraction", descrContent: "In software engineering and computer science, abstraction is:/n the process of removing physical, spatial, or temporal details[2] or attributes in the study of objects or systems in order to more closely attend to other details of interest[3]; it is also very similar in nature to the process of generalization;/nthe abstract concept-objects which are created by keeping common features or attributes to various concrete objects or systems of study[3] — the result of the process of abstraction./nAbstraction, in general, is a fundamental concept to computer science and software development[4]. The process of abstraction can also be referred to as modeling and is closely related to the concepts of theory and design[5]. Models can also be considered types of abstractions per their generalization of aspects of reality./n Abstraction in computer science is also closely related to abstraction in mathematics due to their common focus on building abstractions as objects[2], but is also related to other notions of abstraction used in other fields such as art[3]./n  Abstractions may also refer to vehicles, features, or rules of computational systems or programming languages that carry or utilize features of or abstraction itself, such as:/n the process or feature of using data types to perform data abstraction to decouple usage of from working representations of data structures within programs[6];/nthe concept of procedures, functions, or subroutines which represent a specific way of abstracting of control flow in programs;/nthe rules commonly named \"abstraction\" that generalize expressions using free and bound variables in the various versions of the lambda calculus[7][8];/nthe usage of S-expressions as an abstraction of data structures and programs in the Lisp programming language[9];/nthe process of reorganizing common behavior from non-abstract classes into \"abstract classes\" using inheritance to abstract over sub-classes as seen in the object-oriented C++ and Java programming languages./n ", nameImage: "abstraction", linkWikipedia: "https://en.wikipedia.org/wiki/Abstraction_(computer_science)"),
    
    ConceptProgramming(nameTitle: "Algorithm", descrContent: "In mathematics and computer science, an algorithm (/ˈælɡərɪðəm/ (About this sound listen)) is an unambiguous specification of how to solve a class of problems. Algorithms can perform calculation, data processing and automated reasoning tasks./nAs an effective method, an algorithm can be expressed within a finite amount of space and time[1] and in a well-defined formal language[2] for calculating a function.[3] Starting from an initial state and initial input (perhaps empty),[4] the instructions describe a computation that, when executed, proceeds through a finite[5] number of well-defined successive states, eventually producing \"output\"[6] and terminating at a final ending state. The transition from one state to the next is not necessarily deterministic; some algorithms, known as randomized algorithms, incorporate random input.[7]/nThe concept of algorithm has existed for centuries and the use of the concept can be ascribed to Greek mathematicians, e.g. the sieve of Eratosthenes and Euclid's algorithm;[8] the term algorithm itself derives from the 9th Century mathematician Muḥammad ibn Mūsā al'Khwārizmī, latinized 'Algoritmi'. A partial formalization of what would become the modern notion of algorithm began with attempts to solve the Entscheidungsproblem (the \"decision problem\") posed by David Hilbert in 1928. Subsequent formalizations were framed as attempts to define \"effective calculability\"[9] or \"effective method\";[10] those formalizations included the Gödel–Herbrand–Kleene recursive functions of 1930, 1934 and 1935, Alonzo Church's lambda calculus of 1936, Emil Post's Formulation 1 of 1936, and Alan Turing's Turing machines of 1936–7 and 1939.", nameImage: "algorithm", linkWikipedia: "https://en.wikipedia.org/wiki/Algorithm"),
    
    ConceptProgramming(nameTitle: "Class", descrContent: "In object-oriented programming, a class is an extensible program-code-template for creating objects, providing initial values for state (member variables) and implementations of behavior (member functions or methods).[1][2] In many languages, the class name is used as the name for the class (the template itself), the name for the default constructor of the class (a subroutine that creates objects), and as the type of objects generated by instantiating the class; these distinct concepts are easily conflated.[2]/nWhen an object is created by a constructor of the class, the resulting object is called an instance of the class, and the member variables specific to the object are called instance variables, to contrast with the class variables shared across the class./nIn some languages, classes are only a compile-time feature (new classes cannot be declared at runtime), while in other languages classes are first-class citizens, and are generally themselves objects (typically of type Class or similar). In these languages, a class that creates classes is called a metaclass.", nameImage: "class", linkWikipedia: "https://en.wikipedia.org/wiki/Class_(computer_programming)"),
    
    ConceptProgramming(nameTitle: "Sentence Conditional", descrContent: "In computer science, conditional statements, conditional expressions and conditional constructs are features of a programming language, which perform different computations or actions depending on whether a programmer-specified boolean condition evaluates to true or false. Apart from the case of branch predication, this is always achieved by selectively altering the control flow based on some condition./nIn imperative programming languages, the term \"conditional statement\" is usually used, whereas in functional programming, the terms \"conditional expression\" or \"conditional construct\" are preferred, because these terms all have distinct meanings./nA conditional is sometimes colloquially referred to as an \"if-check,\" especially when perceived as a simple one and when its specific form is irrelevant or unknown./nAlthough dynamic dispatch is not usually classified as a conditional construct, it is another way to select between alternatives at runtime", nameImage: "conditional", linkWikipedia: "https://en.wikipedia.org/wiki/Conditional_(computer_programming)"),
    
    ConceptProgramming(nameTitle: "Loop", descrContent: "LOOP is a programming language designed by Uwe Schöning, along with GOTO and WHILE. The only operations supported in the language are assignment, addition and looping./nThe key property of the LOOP language is that the functions it can compute are exactly the primitive recursive functions.[1]", nameImage: "loop", linkWikipedia: "https://en.wikipedia.org/wiki/LOOP_(programming_language)")
    
]


